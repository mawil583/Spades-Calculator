import React, { useContext } from 'react';
import { Modal, ModalOverlay, ModalContent } from '@chakra-ui/react';
import { addInputs } from '../../helpers/math/spadesMath';
import { PlayerInput } from '../forms';
import { TeamInputHeading } from '../forms';
import { SimpleGrid } from '@chakra-ui/react';
import { GlobalContext } from '../../helpers/context';

function ErrorModal({
  isOpen,
  setIsModalOpen,
  index,
  names,
  isCurrent,
  roundHistory,
  currentRound: propCurrentRound, // Rename to avoid confusion
  errorMessage,
}) {
  const { currentRound: contextCurrentRound } = useContext(GlobalContext);

  // Use context currentRound if available, otherwise fall back to prop
  const currentRound = contextCurrentRound || propCurrentRound;

  const { team1BidsAndActuals, team2BidsAndActuals } = currentRound;
  const team1Actuals = {
    p1Actual: team1BidsAndActuals?.p1Actual || '',
    p2Actual: team1BidsAndActuals?.p2Actual || '',
  };
  const team2Actuals = {
    p1Actual: team2BidsAndActuals?.p1Actual || '',
    p2Actual: team2BidsAndActuals?.p2Actual || '',
  };
  const team1ActualTotal = addInputs(
    team1Actuals.p1Actual,
    team1Actuals.p2Actual
  );
  const team2ActualTotal = addInputs(
    team2Actuals.p1Actual,
    team2Actuals.p2Actual
  );

  // Check if any actuals are auto-generated using the new tracking
  const hasAutoGeneratedActuals = () => {
    if (currentRound && currentRound.autoGeneratedActuals) {
      return Object.values(currentRound.autoGeneratedActuals).some(
        (value) => value === true
      );
    }
    return false;
  };

  const showAutoGeneratedKey = hasAutoGeneratedActuals();

  return (
    <Modal
      isOpen={isOpen}
      onClose={() => {
        setIsModalOpen(false);
      }}
      style={{ color: '#ebf5ee', backgroundColor: '#464f51' }}
      returnFocusOnClose={false}
    >
      <ModalOverlay />
      <ModalContent>
        <div data-cy="actualSection" data-testid="actualSection">
          <TeamInputHeading
            team1Total={team1ActualTotal}
            team2Total={team2ActualTotal}
            title="Actuals"
            team1Bids={[team1BidsAndActuals?.p1Bid, team1BidsAndActuals?.p2Bid]}
            team2Bids={[team2BidsAndActuals?.p1Bid, team2BidsAndActuals?.p2Bid]}
            isEditable={true}
            index={index}
            isCurrent={isCurrent}
            currentRound={currentRound}
            roundHistory={roundHistory}
          />
          <div
            style={{
              color: '#f95050',
              display: 'flex',
              flexDirection: 'row',
              justifyContent: 'center',
              padding: '20px',
            }}
            dangerouslySetInnerHTML={{ __html: errorMessage }}
          />
          <SimpleGrid
            columns={2}
            className="namesContainer"
            style={{ marginTop: '5px', marginBottom: '20px' }}
          >
            <PlayerInput
              roundHistory={roundHistory}
              teamName={names.team1Name}
              index={index}
              isCurrent={isCurrent}
              type={'Actual'}
              playerName={names.t1p1Name}
              currentRound={currentRound}
              inputId="team1BidsAndActuals.p1Actual"
              dealerId="team1BidsAndActuals.p1Bid"
              fieldToUpdate={'team1BidsAndActuals.p1Actual'}
              playerInput={team1BidsAndActuals?.p1Actual}
              teamClassName="team1"
            />
            <PlayerInput
              roundHistory={roundHistory}
              teamName={names.team2Name}
              index={index}
              isCurrent={isCurrent}
              type={'Actual'}
              playerName={names.t2p1Name}
              currentRound={currentRound}
              inputId="team2BidsAndActuals.p1Actual"
              dealerId="team2BidsAndActuals.p1Bid"
              fieldToUpdate={'team2BidsAndActuals.p1Actual'}
              playerInput={team2BidsAndActuals?.p1Actual}
              teamClassName="team2"
            />
            <PlayerInput
              roundHistory={roundHistory}
              teamName={names.team1Name}
              index={index}
              isCurrent={isCurrent}
              type={'Actual'}
              playerName={names.t1p2Name}
              currentRound={currentRound}
              inputId="team1BidsAndActuals.p2Actual"
              dealerId="team1BidsAndActuals.p2Bid"
              fieldToUpdate={'team1BidsAndActuals.p2Actual'}
              playerInput={team1BidsAndActuals?.p2Actual}
              teamClassName="team1"
            />
            <PlayerInput
              roundHistory={roundHistory}
              teamName={names.team2Name}
              index={index}
              isCurrent={isCurrent}
              type={'Actual'}
              playerName={names.t2p2Name}
              currentRound={currentRound}
              inputId="team2BidsAndActuals.p2Actual"
              dealerId="team2BidsAndActuals.p2Bid"
              fieldToUpdate={'team2BidsAndActuals.p2Actual'}
              playerInput={team2BidsAndActuals?.p2Actual}
              teamClassName="team2"
            />
          </SimpleGrid>
          {showAutoGeneratedKey && (
            <div
              style={{
                marginTop: '10px',
                textAlign: 'center',
                fontSize: '0.8em',
                color: 'gray',
                marginBottom: '10px',
              }}
            >
              * auto-generated
            </div>
          )}
        </div>
      </ModalContent>
    </Modal>
  );
}

export default ErrorModal;
