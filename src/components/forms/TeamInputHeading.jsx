import React, { useState, useContext } from 'react';
import { Heading } from '@chakra-ui/react';
import { team1Styles, team2Styles } from '../../helpers/utils/constants';
import { InputModal } from '../modals';
import { GlobalContext } from '../../helpers/context/GlobalContext';

function TeamInputHeading({
  team1Total,
  team2Total,
  title,
  team1Bids = [],
  team2Bids = [],
  isEditable = false,
  index,
  isCurrent,
  currentRound,
  roundHistory,
  // team1Name, // Unused parameter
  // team2Name, // Unused parameter
}) {
  const [isTeam1ModalOpen, setIsTeam1ModalOpen] = useState(false);
  const [isTeam2ModalOpen, setIsTeam2ModalOpen] = useState(false);
  const { setCurrentRound, setRoundHistory } = useContext(GlobalContext);

  // Check if neither player on each team went nil
  const team1CanEdit =
    isEditable &&
    team1Bids.every((bid) => bid !== 'Nil' && bid !== 'Blind Nil');
  const team2CanEdit =
    isEditable &&
    team2Bids.every((bid) => bid !== 'Nil' && bid !== 'Blind Nil');

  const handleTeam1Click = () => {
    if (team1CanEdit) {
      setIsTeam1ModalOpen(true);
    }
  };

  const handleTeam2Click = () => {
    if (team2CanEdit) {
      setIsTeam2ModalOpen(true);
    }
  };

  // Custom handler for team total updates
  const handleTeamTotalUpdate = (teamNumber, totalValue) => {
    const teamField = `team${teamNumber}Total`;

    if (isCurrent) {
      // Use the team total field name, let GlobalContext handle the individual updates
      setCurrentRound({
        input: totalValue,
        fieldToUpdate: teamField,
        currentRound: { ...currentRound },
      });
    } else {
      // For historical rounds, update both fields
      const actualTeamField =
        teamNumber === 1 ? 'team1BidsAndActuals' : 'team2BidsAndActuals';

      // Calculate individual values (divide by 2)
      const individualValue = Math.floor(totalValue / 2);
      const remainder = totalValue % 2;

      // Distribute the total between players
      const p1Value = individualValue + remainder; // First player gets the remainder
      const p2Value = individualValue;

      // Mark both actuals as auto-generated for this team
      const autoGeneratedKey1 = teamNumber === 1 ? 'team1P1' : 'team2P1';
      const autoGeneratedKey2 = teamNumber === 1 ? 'team1P2' : 'team2P2';

      const updatedRound = {
        ...currentRound,
        [actualTeamField]: {
          ...currentRound[actualTeamField],
          p1Actual: p1Value,
          p2Actual: p2Value,
        },
        autoGeneratedActuals: {
          ...currentRound.autoGeneratedActuals,
          [autoGeneratedKey1]: true,
          [autoGeneratedKey2]: true,
        },
      };

      const newRoundHistory = [...roundHistory];
      newRoundHistory[index] = updatedRound;
      setRoundHistory(newRoundHistory);
    }
  };

  return (
    <>
      {/* Team 1 Modal */}
      <InputModal
        isCurrent={isCurrent}
        playerName="Team 1"
        isOpen={isTeam1ModalOpen}
        setIsModalOpen={setIsTeam1ModalOpen}
        type="Team Total"
        fieldToUpdate="team1Total"
        currentRound={currentRound}
        roundHistory={roundHistory}
        index={index}
        onCustomUpdate={(value) => handleTeamTotalUpdate(1, value)}
      />

      {/* Team 2 Modal */}
      <InputModal
        isCurrent={isCurrent}
        playerName="Team 2"
        isOpen={isTeam2ModalOpen}
        setIsModalOpen={setIsTeam2ModalOpen}
        type="Team Total"
        fieldToUpdate="team2Total"
        currentRound={currentRound}
        roundHistory={roundHistory}
        index={index}
        onCustomUpdate={(value) => handleTeamTotalUpdate(2, value)}
      />

      <div
        style={{
          position: 'relative',
          display: 'flex',
          flexDirection: 'row',
          justifyContent: 'space-around',
        }}
      >
        <Heading
          size="lg"
          style={{
            position: 'absolute',
            marginRight: '50%',
            paddingTop: '15px',
            cursor: team1CanEdit ? 'pointer' : 'default',
            border: team1CanEdit ? '0.5px solid rgba(0, 0, 0, 0.3)' : 'none',
            borderRadius: team1CanEdit ? '4px' : '0',
            padding: team1CanEdit ? '1px 4px' : '0',
            ...team1Styles,
          }}
          {...(team1CanEdit && { contentEditable: true, tabIndex: -1 })}
          onClick={handleTeam1Click}
        >
          {team1Total}
        </Heading>
        <Heading mt={'10px'} mb={'10px'} size={'md'}>
          {title}
        </Heading>
        <Heading
          size="lg"
          style={{
            position: 'absolute',
            marginLeft: '50%',
            paddingTop: '15px',
            cursor: team2CanEdit ? 'pointer' : 'default',
            border: team2CanEdit ? '0.5px solid rgba(0, 0, 0, 0.3)' : 'none',
            borderRadius: team2CanEdit ? '4px' : '0',
            padding: team2CanEdit ? '1px 4px' : '0',
            ...team2Styles,
          }}
          {...(team2CanEdit && { contentEditable: true, tabIndex: -1 })}
          onClick={handleTeam2Click}
        >
          {team2Total}
        </Heading>
      </div>
    </>
  );
}

export default TeamInputHeading;
