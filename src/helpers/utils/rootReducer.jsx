import {
  defaultLocalStorage,
  setLocalStorage,
  getLocalStorage,
} from './helperFunctions';
import { initialFirstDealerOrder } from './constants';

export const initialState = {
  currentRound: defaultLocalStorage('currentRound', {
    team1BidsAndActuals: {
      p1Bid: '',
      p2Bid: '',
      p1Actual: '',
      p2Actual: '',
    },
    team2BidsAndActuals: {
      p1Bid: '',
      p2Bid: '',
      p1Actual: '',
      p2Actual: '',
    },
    dealerOverride: null, // Add dealer override for current round
    autoGeneratedActuals: {
      team1P1: false,
      team1P2: false,
      team2P1: false,
      team2P2: false,
    },
  }),
  roundHistory: defaultLocalStorage('roundHistory', []),
  firstDealerOrder: defaultLocalStorage(
    'firstDealerOrder',
    initialFirstDealerOrder
  ),
  isFirstGameAmongTeammates: defaultLocalStorage(
    'isFirstGameAmongTeammates',
    true
  ),
};

const rootReducer = (state, action) => {
  const { type, payload } = action;

  switch (type) {
    case 'SET_CURRENT_ROUND':
      try {
        setLocalStorage('currentRound', { ...payload.currentRound });
        return {
          ...state,
          currentRound: getLocalStorage('currentRound'),
        };
      } catch (err) {
        console.error(err);
      }
      break;
    case 'RESET_CURRENT_ROUND':
      try {
        setLocalStorage('currentRound', {
          team1BidsAndActuals: {
            p1Bid: '',
            p2Bid: '',
            p1Actual: '',
            p2Actual: '',
          },
          team2BidsAndActuals: {
            p1Bid: '',
            p2Bid: '',
            p1Actual: '',
            p2Actual: '',
          },
          dealerOverride: null, // Clear dealer override for new round
          autoGeneratedActuals: {
            team1P1: false,
            team1P2: false,
            team2P1: false,
            team2P2: false,
          },
        });
        return {
          ...state,
          currentRound: getLocalStorage('currentRound'),
        };
      } catch (err) {
        console.error(err);
      }
      break;
    case 'RESET_ROUND_HISTORY':
      return {
        ...state,
        roundHistory: [],
      };
    case 'SET_ROUND_HISTORY':
      try {
        setLocalStorage('roundHistory', [...payload.roundHistory]);
        return {
          ...state,
          roundHistory: getLocalStorage('roundHistory'),
        };
      } catch (err) {
        console.error(err);
      }
      break;
    case 'SET_FIRST_DEALER_ORDER':
      try {
        setLocalStorage('firstDealerOrder', [...payload.firstDealerOrder]);
        return {
          ...state,
          firstDealerOrder: getLocalStorage('firstDealerOrder'),
        };
      } catch (err) {
        console.error(err);
      }
      break;
    case 'SET_DEALER_OVERRIDE':
      try {
        const updatedCurrentRound = {
          ...state.currentRound,
          dealerOverride: payload.dealerOverride,
        };

        setLocalStorage('currentRound', updatedCurrentRound);
        const storedRound = getLocalStorage('currentRound');

        return {
          ...state,
          currentRound: storedRound,
        };
      } catch (err) {
        console.error('Error in SET_DEALER_OVERRIDE:', err);
      }
      break;
    default:
      console.log('default called');
      return state;
  }
};

export default rootReducer;
